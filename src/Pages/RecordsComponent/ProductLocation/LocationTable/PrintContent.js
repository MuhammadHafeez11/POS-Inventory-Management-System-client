// components/PrintContent.jsx
import { COMPANYHEADER } from "../../../../constants/companyNameContants"

export const getNestedValue = (obj, path) => {
  if (!obj || !path) return ""
  const properties = path.split(".")
  return properties.reduce((prev, curr) => (prev && prev[curr] ? prev[curr] : ""), obj)
}

const PrintContent = ({ columns, data, t, user, selectedShop, selectedGodown, shop }) => {
    // console.log(shop, selectedShop, selectedGodown, data);    
    //   <p>${shop?.[0]?.shopAddress || "All Shops"}</p>

  const headerHtml = `
    <div style="text-align: center; margin-bottom: 20px;">
      <h2>${COMPANYHEADER || "Company Name"}</h2>
      <h3>${selectedShop || selectedGodown ? t("Shop Products Report") : t("Available Products Report")}</h3>
      <p>${t("Date")}: ${new Date().toLocaleDateString()} | ${t("Time")}: ${new Date().toLocaleTimeString()}</p>
      <p>${t("Generated By")}: ${user?.user?.name || "User"}</p>
    </div>
  `

  let quantity = 0
  let price = 0
  const processedData = data?.filter((item) => item.productQuantity > 0) || []

  processedData.forEach((item) => {
    const qty = parseInt(item.productQuantity || 0)
    const itemPrice = parseInt(item.totalInvoicePrice || 0)
    if (!isNaN(qty)) quantity += qty
    if (!isNaN(itemPrice)) price += itemPrice
  })

  let tableHtml = `
    <table>
      <thead>
        <tr>
          <th>${t("sNo")}</th>
          ${columns.map((col) => `<th>${col.label}</th>`).join("")}
        </tr>
      </thead>
      <tbody>
  `

  processedData.forEach((item, index) => {
    tableHtml += `
      <tr>
        <td>${index + 1}</td>
        ${columns.map((col) => {
          let value = ""
          const rawValue = getNestedValue(item, col.field)

          if (col.format === "date") {
            value = rawValue ? new Date(rawValue).toLocaleDateString("en-GB") : ""
          } else if (col.format === "time") {
            value = rawValue ? new Date(rawValue).toLocaleTimeString() : ""
          } else if (col.format === "bool") {
            value = rawValue ? rawValue.toLocaleString() : ""
          } else if (col.field === "updatedAt") {
            const date = new Date(rawValue)
            value = !isNaN(date)
              ? new Intl.DateTimeFormat("en-PK", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                  second: "2-digit",
                  hour12: true,
                  timeZone: "Asia/Karachi",
                }).format(date)
              : "Invalid Date"
          } else {
            value = rawValue
          }

          return `<td>${value}</td>`
        }).join("")}
      </tr>
    `
  })

  tableHtml += `
      </tbody>
      <tfoot>
        <tr>
          <td></td>
          ${columns.map((col) => {
            if (col.field === "productQuantity") {
              return `<td>${quantity}</td>`
            } else if (col.field === "totalInvoicePrice") {
              return `<td>${price}</td>`
            } else {
              return `<td></td>`
            }
          }).join("")}
        </tr>
      </tfoot>
    </table>
  `

  return headerHtml + tableHtml
}

export default PrintContent